"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[1864],{3973:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"examples","title":"Examples","description":"This page contains practical examples showing how to use RN Structured Logger in real-world scenarios.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/rn-structured-logger/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/sitharaj88/rn-structured-logger/edit/master/docs-site/docs/examples.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Examples"},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/rn-structured-logger/docs/api-reference"}}');var o=r(4848),a=r(8453);const s={sidebar_label:"Examples"},i="Examples",l={},c=[{value:"Basic Setup Examples",id:"basic-setup-examples",level:2},{value:"Development vs Production Configuration",id:"development-vs-production-configuration",level:3},{value:"Expo App with Conditional File Logging",id:"expo-app-with-conditional-file-logging",level:3},{value:"Logging Patterns",id:"logging-patterns",level:2},{value:"User Authentication Flow",id:"user-authentication-flow",level:3},{value:"API Request/Response Logging",id:"api-requestresponse-logging",level:3},{value:"Error Boundary with Structured Logging",id:"error-boundary-with-structured-logging",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Custom Transport Example",id:"custom-transport-example",level:3},{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Environment-Based Configuration",id:"environment-based-configuration",level:3},{value:"React Native Navigation Logging",id:"react-native-navigation-logging",level:3}];function g(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"examples",children:"Examples"})}),"\n",(0,o.jsx)(e.p,{children:"This page contains practical examples showing how to use RN Structured Logger in real-world scenarios."}),"\n",(0,o.jsx)(e.h2,{id:"basic-setup-examples",children:"Basic Setup Examples"}),"\n",(0,o.jsx)(e.h3,{id:"development-vs-production-configuration",children:"Development vs Production Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { initLogger, ConsoleTransport, FileTransport, SentryTransport, makeRedactor } from 'rn-structured-logger';\nimport { Platform } from 'react-native';\n\n// Development configuration\nconst devConfig = {\n  level: 'debug',\n  transports: [ConsoleTransport],\n  patchConsole: true,\n};\n\n// Production configuration\nconst prodConfig = {\n  level: 'info',\n  transports: [\n    ConsoleTransport,\n    // File logging only on native platforms\n    ...(Platform.OS !== 'web' ? [FileTransport({ fileName: 'app.log' })] : []),\n    SentryTransport(),\n  ],\n  redactor: makeRedactor(['password', 'token', 'email', 'ssn']),\n  sampling: { rate: 0.1 }, // Sample 10% of non-error logs\n  rateLimit: { maxPerMin: 300 },\n  batch: { size: 50, intervalMs: 2000 },\n};\n\n// Initialize based on environment\ninitLogger(__DEV__ ? devConfig : prodConfig);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"expo-app-with-conditional-file-logging",children:"Expo App with Conditional File Logging"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { initLogger, ConsoleTransport, FileTransport, makeRedactor } from 'rn-structured-logger';\nimport * as Device from 'expo-device';\nimport { Platform } from 'react-native';\n\n// Gather device information\nconst deviceInfo = {\n  platform: Platform.OS,\n  appVersion: '1.0.0',\n  deviceModel: Device.modelName || 'unknown',\n  osVersion: Device.osVersion || 'unknown',\n  deviceName: Device.deviceName || 'unknown',\n};\n\n// Initialize logger with platform-specific transports\ninitLogger({\n  level: 'info',\n  // Use file transport only on native platforms\n  transports: Platform.OS === 'web'\n    ? [ConsoleTransport]\n    : [ConsoleTransport, FileTransport({ fileName: 'expo-app.log' })],\n  redactor: makeRedactor(['password', 'token', 'email']),\n  device: deviceInfo,\n  patchConsole: true,\n});\n"})}),"\n",(0,o.jsx)(e.h2,{id:"logging-patterns",children:"Logging Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"user-authentication-flow",children:"User Authentication Flow"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { getLogger } from 'rn-structured-logger';\n\nconst authLogger = getLogger('auth');\nconst apiLogger = getLogger('api');\n\nclass AuthService {\n  async login(credentials: { email: string; password: string }) {\n    const correlationId = `login-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Set correlation ID for the entire flow\n    authLogger.setCorrelationId(correlationId);\n\n    try {\n      authLogger.info('Login attempt started', {\n        email: credentials.email,\n        loginMethod: 'email'\n      });\n\n      // Validate credentials\n      authLogger.debug('Validating credentials');\n\n      // Make API call\n      apiLogger.info('Calling authentication API', {\n        endpoint: '/auth/login',\n        method: 'POST'\n      });\n\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: credentials.email,\n          // Password is automatically redacted by our redactor\n          password: credentials.password\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.status}`);\n      }\n\n      const userData = await response.json();\n\n      authLogger.info('Login successful', {\n        userId: userData.id,\n        userRole: userData.role\n      });\n\n      return userData;\n\n    } catch (error) {\n      authLogger.error('Login failed', {\n        error: error.message,\n        email: credentials.email\n      });\n      throw error;\n    } finally {\n      // Clear correlation ID\n      authLogger.setCorrelationId(undefined);\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"api-requestresponse-logging",children:"API Request/Response Logging"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { getLogger } from 'rn-structured-logger';\n\nconst apiLogger = getLogger('api');\nconst errorLogger = getLogger('error');\n\nclass ApiClient {\n  private async makeRequest<T>(\n    method: string,\n    url: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const requestId = `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const startTime = Date.now();\n\n    apiLogger.info('API request started', {\n      requestId,\n      method,\n      url,\n      headers: options.headers,\n      bodySize: options.body ? JSON.stringify(options.body).length : 0\n    });\n\n    try {\n      const response = await fetch(url, {\n        method,\n        ...options,\n        headers: {\n          'X-Request-ID': requestId,\n          ...options.headers\n        }\n      });\n\n      const responseTime = Date.now() - startTime;\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        apiLogger.warn('API request failed', {\n          requestId,\n          status: response.status,\n          statusText: response.statusText,\n          responseTime,\n          error: errorText\n        });\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      apiLogger.info('API request completed', {\n        requestId,\n        status: response.status,\n        responseTime,\n        dataSize: JSON.stringify(data).length\n      });\n\n      return data;\n\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n\n      errorLogger.error('API request error', {\n        requestId,\n        method,\n        url,\n        responseTime,\n        error: error.message,\n        stack: error.stack\n      });\n\n      throw error;\n    }\n  }\n\n  async get<T>(url: string, options?: RequestInit): Promise<T> {\n    return this.makeRequest('GET', url, options);\n  }\n\n  async post<T>(url: string, data: any, options?: RequestInit): Promise<T> {\n    return this.makeRequest('POST', url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options?.headers\n      },\n      body: JSON.stringify(data)\n    });\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"error-boundary-with-structured-logging",children:"Error Boundary with Structured Logging"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { getLogger } from 'rn-structured-logger';\n\nconst errorLogger = getLogger('error');\nconst uiLogger = getLogger('ui');\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log the error with full context\n    errorLogger.error('React Error Boundary caught an error', {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      errorBoundary: 'main',\n      timestamp: new Date().toISOString()\n    });\n\n    // Also log UI-specific information\n    uiLogger.fatal('Application error occurred', {\n      errorType: 'react_error_boundary',\n      errorMessage: error.message,\n      hasFallback: !!this.props.fallback\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div style={{ padding: 20, textAlign: 'center' }}>\n          <h2>Something went wrong</h2>\n          <p>The error has been logged and reported.</p>\n          <button onClick={() => this.setState({ hasError: false })}>\n            Try again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n"})}),"\n",(0,o.jsx)(e.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { getLogger } from 'rn-structured-logger';\n\nconst perfLogger = getLogger('performance');\nconst apiLogger = getLogger('api');\n\nclass PerformanceMonitor {\n  private startTimes = new Map<string, number>();\n\n  start(operation: string, context?: any) {\n    const id = `${operation}-${Date.now()}`;\n    this.startTimes.set(id, Date.now());\n\n    perfLogger.debug('Operation started', {\n      operation,\n      operationId: id,\n      context\n    });\n\n    return id;\n  }\n\n  end(operationId: string, context?: any) {\n    const startTime = this.startTimes.get(operationId);\n    if (!startTime) {\n      perfLogger.warn('Performance monitoring: operation not found', {\n        operationId\n      });\n      return;\n    }\n\n    const duration = Date.now() - startTime;\n    this.startTimes.delete(operationId);\n\n    const level = duration > 5000 ? 'warn' : duration > 1000 ? 'info' : 'debug';\n\n    perfLogger.log(level, 'Operation completed', {\n      operationId,\n      duration,\n      context\n    });\n\n    // Log slow operations\n    if (duration > 5000) {\n      perfLogger.warn('Slow operation detected', {\n        operationId,\n        duration,\n        threshold: 5000,\n        context\n      });\n    }\n  }\n\n  async measureAsync<T>(\n    operation: string,\n    fn: () => Promise<T>,\n    context?: any\n  ): Promise<T> {\n    const operationId = this.start(operation, context);\n    try {\n      const result = await fn();\n      this.end(operationId, { ...context, success: true });\n      return result;\n    } catch (error) {\n      this.end(operationId, { ...context, success: false, error: error.message });\n      throw error;\n    }\n  }\n}\n\n// Usage example\nconst perfMonitor = new PerformanceMonitor();\n\nasync function fetchUserData(userId: string) {\n  return perfMonitor.measureAsync(\n    'fetchUserData',\n    async () => {\n      const response = await fetch(`/api/users/${userId}`);\n      return response.json();\n    },\n    { userId, endpoint: '/api/users/:id' }\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"custom-transport-example",children:"Custom Transport Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { Transport, LogRecord } from 'rn-structured-logger';\n\nclass AnalyticsTransport implements Transport {\n  name = 'analytics';\n  private events: LogRecord[] = [];\n\n  write(records: LogRecord[]): void {\n    // Filter only info and warning levels for analytics\n    const analyticsEvents = records.filter(\n      record => record.level === 'info' || record.level === 'warn'\n    );\n\n    this.events.push(...analyticsEvents);\n\n    // Send to analytics service in batches\n    if (this.events.length >= 10) {\n      this.flush();\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.events.length === 0) return;\n\n    try {\n      await fetch('/api/analytics/events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          events: this.events.map(event => ({\n            name: `${event.ns || 'app'}_${event.level}`,\n            properties: {\n              message: event.msg,\n              context: event.ctx,\n              timestamp: event.ts,\n              correlationId: event.correlationId\n            }\n          }))\n        })\n      });\n\n      this.events = [];\n    } catch (error) {\n      console.error('Failed to send analytics events:', error);\n      // Keep events for retry\n    }\n  }\n\n  async dispose(): Promise<void> {\n    await this.flush();\n  }\n}\n\n// Usage\nimport { initLogger, ConsoleTransport } from 'rn-structured-logger';\n\ninitLogger({\n  level: 'info',\n  transports: [ConsoleTransport, new AnalyticsTransport()]\n});\n"})}),"\n",(0,o.jsx)(e.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,o.jsx)(e.h3,{id:"environment-based-configuration",children:"Environment-Based Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// config/logger.config.ts\nimport { LoggerConfig, ConsoleTransport, FileTransport, SentryTransport, makeRedactor } from 'rn-structured-logger';\n\nexport function createLoggerConfig(): LoggerConfig {\n  const isDevelopment = __DEV__;\n  const isWeb = Platform.OS === 'web';\n\n  const baseConfig: LoggerConfig = {\n    level: isDevelopment ? 'debug' : 'info',\n    redactor: makeRedactor(['password', 'token', 'email', 'ssn', 'creditCard']),\n    patchConsole: isDevelopment,\n  };\n\n  if (isWeb) {\n    // Web configuration\n    return {\n      ...baseConfig,\n      transports: [ConsoleTransport],\n      sampling: { rate: 0.5 }, // Sample 50% in web environment\n    };\n  } else {\n    // Native configuration\n    return {\n      ...baseConfig,\n      transports: [\n        ConsoleTransport,\n        FileTransport({\n          fileName: `app-${new Date().toISOString().split('T')[0]}.log`,\n          maxBytes: 2 * 1024 * 1024, // 2MB\n        }),\n        ...(isDevelopment ? [] : [SentryTransport()]),\n      ],\n      sampling: { rate: isDevelopment ? 1 : 0.1 },\n      rateLimit: { maxPerMin: isDevelopment ? 1000 : 300 },\n      batch: { size: 25, intervalMs: 1000 },\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"react-native-navigation-logging",children:"React Native Navigation Logging"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { NavigationContainer } from '@react-navigation/native';\nimport { getLogger } from 'rn-structured-logger';\n\nconst navLogger = getLogger('navigation');\n\nconst navigationRef = React.createRef();\n\nfunction App() {\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onStateChange={(state) => {\n        if (state) {\n          const currentRoute = state.routes[state.index];\n          navLogger.info('Navigation state changed', {\n            currentRoute: currentRoute.name,\n            routeParams: currentRoute.params,\n            routeCount: state.routes.length,\n            navigationType: 'state_change'\n          });\n        }\n      }}\n      onReady={() => {\n        navLogger.info('Navigation container ready');\n      }}\n    >\n      {/* Your navigation structure */}\n    </NavigationContainer>\n  );\n}\n\n// Manual navigation logging\nexport function logNavigation(routeName: string, params?: any) {\n  navLogger.debug('Manual navigation', {\n    routeName,\n    params,\n    navigationType: 'manual'\n  });\n}\n"})})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>i});var t=r(6540);const o={},a=t.createContext(o);function s(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);