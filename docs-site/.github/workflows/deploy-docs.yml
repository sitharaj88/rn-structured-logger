name: Deploy Docs Site

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.0'
          cache: 'npm'
          cache-dependency-path: docs-site/package-lock.json

      - name: Check Node version
        run: node --version

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: cd docs-site && npm ci

      - name: Build with Docusaurus
        run: cd docs-site && npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs-site/build

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Show deployed URL
        if: always()
        run: |
          echo "Deployed page URL: ${{ steps.deployment.outputs.page_url }}"
        shell: bash

      - name: Check page URL HTTP status
        if: always()
        run: |
          url="${{ steps.deployment.outputs.page_url }}"
          echo "Checking $url"
          if [ -z "$url" ]; then
            echo "No page_url output from deploy action"
            exit 1
          fi
          # follow redirects, get HTTP status code
          status=$(curl -s -o /dev/null -w "%{http_code}" --location --max-time 15 "$url" || echo "000")
          echo "HTTP status: $status"
          if [ "$status" -ne 200 ]; then
            echo "Non-200 HTTP status ($status) for $url"
            # print response headers to help debugging
            curl -I --location --max-time 15 "$url" || true
            exit 1
          fi
        shell: bash