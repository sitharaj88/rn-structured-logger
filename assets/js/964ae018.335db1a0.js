"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7443],{3588:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-reference","title":"API Reference","description":"This section contains the complete API reference for RN Structured Logger, automatically generated from the TypeScript source code.","source":"@site/docs/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/rn-structured-logger/docs/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/sitharaj88/rn-structured-logger/edit/master/docs-site/docs/api-reference.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"API Reference"},"sidebar":"tutorialSidebar","previous":{"title":"Translate your site","permalink":"/rn-structured-logger/docs/tutorial-extras/translate-your-site"},"next":{"title":"Examples","permalink":"/rn-structured-logger/docs/examples"}}');var o=r(4848),i=r(8453);const t={sidebar_label:"API Reference"},l="API Reference",c={},d=[{value:"Core Functions",id:"core-functions",level:2},{value:"<code>initLogger(config: LoggerConfig): Logger</code>",id:"initloggerconfig-loggerconfig-logger",level:3},{value:"<code>getLogger(namespace?: string): Logger</code>",id:"getloggernamespace-string-logger",level:3},{value:"Logger Class",id:"logger-class",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:3},{value:"Logging Methods",id:"logging-methods",level:4},{value:"<code>trace(message: string, context?: object): void</code>",id:"tracemessage-string-context-object-void",level:5},{value:"<code>debug(message: string, context?: object): void</code>",id:"debugmessage-string-context-object-void",level:5},{value:"<code>info(message: string, context?: object): void</code>",id:"infomessage-string-context-object-void",level:5},{value:"<code>warn(message: string, context?: object): void</code>",id:"warnmessage-string-context-object-void",level:5},{value:"<code>error(message: string, context?: object): void</code>",id:"errormessage-string-context-object-void",level:5},{value:"<code>fatal(message: string, context?: object): void</code>",id:"fatalmessage-string-context-object-void",level:5},{value:"Configuration Methods",id:"configuration-methods",level:4},{value:"<code>setLevel(level: LogLevel): void</code>",id:"setlevellevel-loglevel-void",level:5},{value:"<code>setCorrelationId(id?: string): void</code>",id:"setcorrelationidid-string-void",level:5},{value:"Lifecycle Methods",id:"lifecycle-methods",level:4},{value:"<code>flush(): Promise&lt;void&gt;</code>",id:"flush-promisevoid",level:5},{value:"<code>dispose(): Promise&lt;void&gt;</code>",id:"dispose-promisevoid",level:5},{value:"<code>child(namespace: string): Logger</code>",id:"childnamespace-string-logger",level:5},{value:"Configuration Types",id:"configuration-types",level:2},{value:"<code>LoggerConfig</code>",id:"loggerconfig",level:3},{value:"<code>LogLevel</code>",id:"loglevel",level:3},{value:"<code>LogRecord</code>",id:"logrecord",level:3},{value:"<code>Transport</code>",id:"transport",level:3},{value:"Transport Classes",id:"transport-classes",level:2},{value:"<code>ConsoleTransport</code>",id:"consoletransport",level:3},{value:"<code>FileTransport(options: FileTransportOptions)</code>",id:"filetransportoptions-filetransportoptions",level:3},{value:"<code>SentryTransport()</code>",id:"sentrytransport",level:3},{value:"<code>HttpTransport(options: HttpTransportOptions)</code>",id:"httptransportoptions-httptransportoptions",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"<code>makeRedactor(keys: string[]): Redactor</code>",id:"makeredactorkeys-string-redactor",level:3},{value:"<code>shouldSample(level: LogLevel, rate: number): boolean</code>",id:"shouldsamplelevel-loglevel-rate-number-boolean",level:3},{value:"<code>makeRateLimiter(maxPerMin: number): () =&gt; boolean</code>",id:"makeratelimitermaxpermin-number---boolean",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"TypeScript Support",id:"typescript-support",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,o.jsx)(n.p,{children:"This section contains the complete API reference for RN Structured Logger, automatically generated from the TypeScript source code."}),"\n",(0,o.jsx)(n.h2,{id:"core-functions",children:"Core Functions"}),"\n",(0,o.jsx)(n.h3,{id:"initloggerconfig-loggerconfig-logger",children:(0,o.jsx)(n.code,{children:"initLogger(config: LoggerConfig): Logger"})}),"\n",(0,o.jsx)(n.p,{children:"Initializes the global logger instance with the provided configuration."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"config"})," - The logger configuration object"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," The initialized logger instance"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { initLogger, ConsoleTransport } from 'rn-structured-logger';\n\nconst logger = initLogger({\n  level: 'info',\n  transports: [ConsoleTransport]\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getloggernamespace-string-logger",children:(0,o.jsx)(n.code,{children:"getLogger(namespace?: string): Logger"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the global logger instance or creates a namespaced child logger."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"namespace"})," - Optional namespace for creating a child logger"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," The global logger instance or a namespaced child logger"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"const rootLogger = getLogger();\nconst apiLogger = getLogger('api');\nconst authLogger = getLogger('auth:login');\n"})}),"\n",(0,o.jsx)(n.h2,{id:"logger-class",children:"Logger Class"}),"\n",(0,o.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"new Logger(config: LoggerConfig)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Creates a new logger instance with the given configuration."}),"\n",(0,o.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h4,{id:"logging-methods",children:"Logging Methods"}),"\n",(0,o.jsx)(n.h5,{id:"tracemessage-string-context-object-void",children:(0,o.jsx)(n.code,{children:"trace(message: string, context?: object): void"})}),"\n",(0,o.jsx)(n.p,{children:"Logs a trace message (most verbose level)."}),"\n",(0,o.jsx)(n.h5,{id:"debugmessage-string-context-object-void",children:(0,o.jsx)(n.code,{children:"debug(message: string, context?: object): void"})}),"\n",(0,o.jsx)(n.p,{children:"Logs a debug message for development purposes."}),"\n",(0,o.jsx)(n.h5,{id:"infomessage-string-context-object-void",children:(0,o.jsx)(n.code,{children:"info(message: string, context?: object): void"})}),"\n",(0,o.jsx)(n.p,{children:"Logs an info message for general application information."}),"\n",(0,o.jsx)(n.h5,{id:"warnmessage-string-context-object-void",children:(0,o.jsx)(n.code,{children:"warn(message: string, context?: object): void"})}),"\n",(0,o.jsx)(n.p,{children:"Logs a warning message for potential issues."}),"\n",(0,o.jsx)(n.h5,{id:"errormessage-string-context-object-void",children:(0,o.jsx)(n.code,{children:"error(message: string, context?: object): void"})}),"\n",(0,o.jsx)(n.p,{children:"Logs an error message for problems that occurred."}),"\n",(0,o.jsx)(n.h5,{id:"fatalmessage-string-context-object-void",children:(0,o.jsx)(n.code,{children:"fatal(message: string, context?: object): void"})}),"\n",(0,o.jsx)(n.p,{children:"Logs a fatal message for critical errors."}),"\n",(0,o.jsx)(n.h4,{id:"configuration-methods",children:"Configuration Methods"}),"\n",(0,o.jsx)(n.h5,{id:"setlevellevel-loglevel-void",children:(0,o.jsx)(n.code,{children:"setLevel(level: LogLevel): void"})}),"\n",(0,o.jsx)(n.p,{children:"Sets the minimum log level at runtime."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"level"})," - The new minimum log level ('trace', 'debug', 'info', 'warn', 'error', 'fatal')"]}),"\n"]}),"\n",(0,o.jsx)(n.h5,{id:"setcorrelationidid-string-void",children:(0,o.jsx)(n.code,{children:"setCorrelationId(id?: string): void"})}),"\n",(0,o.jsx)(n.p,{children:"Sets or clears the correlation ID for all subsequent log records."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"id"})," - The correlation ID, or undefined to clear"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"lifecycle-methods",children:"Lifecycle Methods"}),"\n",(0,o.jsx)(n.h5,{id:"flush-promisevoid",children:(0,o.jsx)(n.code,{children:"flush(): Promise<void>"})}),"\n",(0,o.jsx)(n.p,{children:"Flushes queued records and underlying transports."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," Promise that resolves when all flushing is complete"]}),"\n",(0,o.jsx)(n.h5,{id:"dispose-promisevoid",children:(0,o.jsx)(n.code,{children:"dispose(): Promise<void>"})}),"\n",(0,o.jsx)(n.p,{children:"Flushes and disposes of transports. The logger should not be used after calling this."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," Promise that resolves when disposal is complete"]}),"\n",(0,o.jsx)(n.h5,{id:"childnamespace-string-logger",children:(0,o.jsx)(n.code,{children:"child(namespace: string): Logger"})}),"\n",(0,o.jsx)(n.p,{children:"Creates a child logger with an appended namespace."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"namespace"})," - The namespace to append"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," A new Logger instance with the combined namespace"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-types",children:"Configuration Types"}),"\n",(0,o.jsx)(n.h3,{id:"loggerconfig",children:(0,o.jsx)(n.code,{children:"LoggerConfig"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface LoggerConfig {\n  level?: LogLevel;\n  transports?: Transport[];\n  redactor?: Redactor;\n  sampling?: { rate: number };\n  rateLimit?: { maxPerMin: number };\n  batch?: { size: number; intervalMs: number };\n  device?: Record<string, unknown>;\n  patchConsole?: boolean;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"loglevel",children:(0,o.jsx)(n.code,{children:"LogLevel"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logrecord",children:(0,o.jsx)(n.code,{children:"LogRecord"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface LogRecord {\n  ts: number;           // Timestamp (Unix epoch in milliseconds)\n  level: LogLevel;      // Log severity level\n  msg: string;          // Log message\n  ns?: string;          // Namespace\n  ctx?: object;         // Additional context data\n  correlationId?: string; // Correlation ID for tracking\n  device?: object;      // Device information\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"transport",children:(0,o.jsx)(n.code,{children:"Transport"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface Transport {\n  name: string;\n  write(records: LogRecord[]): void | Promise<void>;\n  flush?(): void | Promise<void>;\n  dispose?(): void | Promise<void>;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"transport-classes",children:"Transport Classes"}),"\n",(0,o.jsx)(n.h3,{id:"consoletransport",children:(0,o.jsx)(n.code,{children:"ConsoleTransport"})}),"\n",(0,o.jsx)(n.p,{children:"Writes structured logs to the JavaScript console with formatted timestamps and levels."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { ConsoleTransport } from 'rn-structured-logger';\n\ninitLogger({\n  transports: [ConsoleTransport]\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"filetransportoptions-filetransportoptions",children:(0,o.jsx)(n.code,{children:"FileTransport(options: FileTransportOptions)"})}),"\n",(0,o.jsx)(n.p,{children:"Writes logs to the local filesystem with automatic rotation."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface FileTransportOptions {\n  fileName: string;    // Name of the log file\n  maxBytes?: number;   // Maximum file size before rotation (default: 524288 bytes)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { FileTransport } from 'rn-structured-logger';\n\ninitLogger({\n  transports: [\n    FileTransport({\n      fileName: 'app.log',\n      maxBytes: 1024 * 1024  // 1MB\n    })\n  ]\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"sentrytransport",children:(0,o.jsx)(n.code,{children:"SentryTransport()"})}),"\n",(0,o.jsx)(n.p,{children:"Sends error and fatal logs to Sentry for monitoring and alerting."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { SentryTransport } from 'rn-structured-logger';\n\ninitLogger({\n  transports: [SentryTransport()]\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"httptransportoptions-httptransportoptions",children:(0,o.jsx)(n.code,{children:"HttpTransport(options: HttpTransportOptions)"})}),"\n",(0,o.jsx)(n.p,{children:"Sends logs to a custom HTTP endpoint."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"interface HttpTransportOptions {\n  url: string;              // The endpoint URL\n  headers?: Record<string, string>;  // Additional headers\n  method?: string;          // HTTP method (default: 'POST')\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { HttpTransport } from 'rn-structured-logger';\n\ninitLogger({\n  transports: [\n    HttpTransport({\n      url: 'https://your-logging-endpoint.com/logs',\n      headers: { Authorization: 'Bearer your-token' }\n    })\n  ]\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,o.jsx)(n.h3,{id:"makeredactorkeys-string-redactor",children:(0,o.jsx)(n.code,{children:"makeRedactor(keys: string[]): Redactor"})}),"\n",(0,o.jsx)(n.p,{children:"Creates a redactor function that masks sensitive data."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"keys"})," - Array of property names to redact"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," A redactor function"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { makeRedactor } from 'rn-structured-logger';\n\nconst redactor = makeRedactor(['password', 'token', 'email']);\n\nlogger.info('User data', {\n  username: 'john_doe',\n  password: 'secret123',  // Will be redacted to '[REDACTED]'\n  email: 'john@example.com'  // Will be redacted\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"shouldsamplelevel-loglevel-rate-number-boolean",children:(0,o.jsx)(n.code,{children:"shouldSample(level: LogLevel, rate: number): boolean"})}),"\n",(0,o.jsx)(n.p,{children:"Determines whether a log record should be sampled based on the level and rate."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"level"})," - The log level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rate"})," - Sampling rate between 0.0 and 1.0"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," True if the log should be included"]}),"\n",(0,o.jsx)(n.h3,{id:"makeratelimitermaxpermin-number---boolean",children:(0,o.jsx)(n.code,{children:"makeRateLimiter(maxPerMin: number): () => boolean"})}),"\n",(0,o.jsx)(n.p,{children:"Creates a rate limiter that allows a maximum number of logs per minute."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"maxPerMin"})," - Maximum number of logs allowed per minute"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Returns:"})," A function that returns true if logging is allowed"]}),"\n",(0,o.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(n.p,{children:"The library throws the following errors:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Error: Logger not initialised. Call initLogger() first."})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Thrown when ",(0,o.jsx)(n.code,{children:"getLogger()"})," is called before ",(0,o.jsx)(n.code,{children:"initLogger()"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Error: [Transport Error]"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Thrown by transports when they encounter errors (e.g., file system errors, network failures)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"typescript-support",children:"TypeScript Support"}),"\n",(0,o.jsx)(n.p,{children:"RN Structured Logger is written in TypeScript and provides full type safety:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"All configuration objects are strongly typed"}),"\n",(0,o.jsx)(n.li,{children:"Log levels are constrained to valid values"}),"\n",(0,o.jsx)(n.li,{children:"Transport interfaces ensure proper implementation"}),"\n",(0,o.jsx)(n.li,{children:"Generic types for context objects"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Fully type-safe usage\ninterface UserContext {\n  userId: number;\n  action: string;\n  timestamp: string;\n}\n\nlogger.info<UserContext>('User action performed', {\n  userId: 123,\n  action: 'login',\n  timestamp: new Date().toISOString()\n});\n"})})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);